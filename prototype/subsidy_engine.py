# -*- coding: utf-8 -*-
"""subsidy_engine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/smwaingeni-ai/AgriX-AfricaDeepTech2025/blob/main/prototype/subsidy_engine.ipynb
"""

# STEP 1: Import modules
import pandas as pd
from google.colab import files

# STEP 2: Upload your advice_costs.csv
print("ðŸ“¤ Upload your formatted 'advice_costs.csv'")
uploaded = files.upload()
csv_filename = list(uploaded.keys())[0]

# STEP 3: Load CSV into DataFrame
df = pd.read_csv(csv_filename)
print("\nðŸ“„ Loaded advice cost data:")
display(df)

# STEP 4: Define the subsidy logic
def calculate_cost(advice_type, applicant_group):
    try:
        row = df[df['AdviceType'] == advice_type].iloc[0]
        cost = row['Cost']
        currency = row['Currency']
        subsidy = row['SubsidyPercent']
        applicable_to = row['ApplicableTo']

        # Check if applicant is eligible for subsidy
        eligible = applicable_to.lower() == "all" or applicant_group.lower() in applicable_to.lower()
        subsidy_applied = subsidy if eligible else 0
        final_cost = cost * (1 - subsidy_applied / 100)

        return {
            "Advice Type": advice_type,
            "Applicant Group": applicant_group,
            "Currency": currency,
            "Base Cost": cost,
            "Eligible for Subsidy": eligible,
            "Subsidy %": subsidy_applied,
            "Final Cost": round(final_cost, 2)
        }

    except IndexError:
        return {"error": f"No advice found for type '{advice_type}'."}

# STEP 5: Test the logic
# You can change these input values
advice_input = "Crop Disease Treatment"   # must match AdviceType column
group_input = "FemaleOnly"                # try 'All', 'GoatFarmers', etc.

result = calculate_cost(advice_input, group_input)
print("\nðŸ’¸ Subsidy Calculation Result:")
for k, v in result.items():
    print(f"{k}: {v}")